#!/usr/bin/env bash
#

#
# PDB check
#  - Based on http://www.snip2code.com/Snippet/165926/Check-for-ipdb-breakpoints-git-hook
#
PDB_CHECK="$(git grep --color -E -n '[ ;]i?pdb')"

#
# Uncompleted merge check
#
MERGE_CHECK="$(git grep --color -E -n '^[<>]{7} .+$')"

if [[ "${#PDB_CHECK}" -gt 0 ]] || [[ "${#MERGE_CHECK}" -gt 0 ]]
then
    OUTPUT_CHECK=""

    echo -e "\n\e[31;4mCOMMIT REJECTED: your code may contain some errors!""\e[0m"
    echo -e " \e[31m│\e[0m"

    if [[ "${#PDB_CHECK}" -gt 0 ]]
    then
        echo -e " \e[31m├\e[0m Found at least one break point."

        OUTPUT_CHECK="${OUTPUT_CHECK}\n\n\e[36mBreak points:\e[0m\n${PDB_CHECK}"
    fi

    if [[ "${#MERGE_CHECK}" -gt 0 ]]
    then
        echo -e " \e[31m├\e[0m Found at least one merge conflict."

        OUTPUT_CHECK="${OUTPUT_CHECK}\n\n\e[36mMerge conflicts:\e[0m\n${MERGE_CHECK}"
    fi

    echo -e " \e[31m│\e[0m"
    echo -e " \e[31m└\e[0m Please, resolve these problems before committing."
    echo -e "   If instead you know \e[4mEXACTLY\e[0m what you're doing,"
    echo -e "    you can force commit using \"\e[1;4mgit commit --no-verify\e[0m\"."
    echo -e "\n  --------------------------------------------------------\c"
    echo -e "${OUTPUT_CHECK}"

    exit 1
fi
